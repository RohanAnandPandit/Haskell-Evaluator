interface List (
    def head = _
    def tail = _
)

def head [] = ?
def head (x:_) = x
def tail (_:xs) = xs

def len [] = 0
def len (x:xs) = 1 + len xs 

class Take implements List (

    def init(int n, [] list) = (
        this.n = n
        this.list = list
    )
    
    def head = (
        if (this.n > 0) (
            x:_ = this.list
            return x
        )
        return ?
    )

    def tail = (
        if (this.n == 1) (return [])
        _:xs = this.list
        return (Take(this.n - 1, xs))
    )

    def toString = (
        if (this.list == []) (return "[]")
        string str = "["
        var xs = this.list
        for (int i; i < this.n && xs != []; i += 1) (
            x:xs = xs
            str += tostr x
            if (i < this.n - 1) (str += ", ")
        )
        return (str + "]")
    )
)

def take 0 ([] _) = []
def take (int _) [] = []
def take (int n) ([] xs) = Take(n, xs)

def drop (int _) [] = []
def drop 0 xs = xs
def drop (int n) (x:xs) = drop (n - 1) xs

class Map implements List (

    def init(Func func, [] list) = (
        this.func = func
        this.list = list
    )
    
    def head = (
        x:_ = this.list
        return (this.func x)
    ) 
    
    def tail = (
        _:xs = this.list
        return (Map(this.func, xs))
    )

    def toString = (
        string str = "["
        var xs = this.list
        while (xs != []) (
            x:xs = xs
            str += tostr (this.func x)
            if (xs != []) (
                str += ", "
            )
        )
        return (str + "]")
    )
    
)

def map (Func _) [] = []
def map (Func func) ([] xs) = Map(func, xs)

def max ([] xs) = foldl max 0 xs 

def min ([] xs) = foldl min 0 xs

def sum ([] xs) = foldl (+) 0 xs

def product ([] xs) = foldl (*) 1 xs

def rev [] = []
def rev ([] xs) = rev' xs [] where (
    def rev' [] bs = bs 
    def rev' (a:as) bs = rev' as (a:bs)
)

def foldr _ u [] = u
def foldr (Func func) u (x:xs) = func x (foldr func u xs)

def foldr1 (Func func) (x:y:xs) = foldr func (func x y) xs

def foldl _ u [] = u
def foldl (*) _ (0:xs) = 0
def foldl (Func func) u (x:xs) = foldl func (func u x) xs

def foldl1 (Func func) (x:y:xs) = foldl func (func x y) xs 

def elem x [] = False
def elem x (y:ys) = x == y || elem x ys

class TakeWhile implements List (

    def init(Func cond, [] list) = (
        this.cond = cond
        this.list = list
    )    
    
    def head = (
        x:_ = this.list
        return x
    ) 
    
    def tail = (
        _:xs = this.list
        x:_ = xs
        if (not (this.cond x)) (
             return []
        )
        return (TakeWhile(this.cond, xs))
    )

    def toString = (
        if (this.list == []) (return "[]")
        string str = "["
        x:xs = this.list
        while (xs != [] && this.cond x) (
            str += tostr x 
            x:xs = xs
            if (xs != [] && this.cond x) (str += ", ")
        )
        return (str + "]")
    )
    
)

def takewhile (Func func) ([] xs) = TakeWhile(func, xs)

def dropwhile (Func _) [] = []
def dropwhile (Func func) (x:xs) = (
	if (func x) (
		return (dropwhile func xs)
	)
	return (x:xs)
)

class Filter implements List (

    def init(Func cond, [] list) = (
        this.cond = cond
        this.list = list
    )    
    
    def head = (
        x:_ = this.list
        return x
    )
    
    def tail = (
        var xs = this.list
        do (
            x:xs = xs
        ) while (not (this.cond x))

        return (Filter(this.cond, x:xs))
    )
    
    def toString = (
        if (this.list == []) (return "[]")
        string str = "["
        var xs = this.list
        int n
        do (
            x:xs = xs
            if (this.cond x) (
                if (n > 0) (
                    str += ", "
                )
                n += 1
                str += tostr x 
            )
              
        ) while (xs != [])
        
        return (str + "]")
    )
)

def filter (Func func) ([] xs) = Filter(func, xs)

class ZipWith implements List (

    def init(Func func, [] xs, [] ys) = (
        this.func = func
        this.xs = xs
        this.ys = ys
    )    
    
    def head = (
        x:_ = this.xs
        y:_ = this.ys
        return (this.func x y)
    ) 
    
    def tail = (
        if (this.xs == [] || this.ys == []) (
            return []
        )
        _:xs' = this.xs
        _:ys' = this.ys
        return (ZipWith(this.func, xs', ys'))
    )

    def toString = (
        string str = "["
        var xs' = this.xs
        var ys' = this.ys 
        while (xs' != [] && ys' != []) (
            x:xs' = xs'
            y:ys' = ys'
            str += tostr (this.func x y)
            if (xs' != [] && ys' != []) (str += ", ")
        )
        return (str + "]")
    )
    
)

def zipwith (Func func) ([] xs) ([] ys) = ZipWith(func, xs, ys)

def zip ([] xs) ([] ys) = ZipWith((x y -> (x, y)), xs, ys)

class Iterate implements List (

	def init(Func func, ? seed) = (
		this.func = func
		this.seed = seed
	)

	def head = this.seed

	def tail = iterate this.func (this.func this.seed)

	def toString = "[" + tostr this.seed + ".." + tostr this.func + " n" + "]"
)

def iterate (Func func) (? value) = Iterate(func, value) 


class Iterate2 implements List (

	def init(? func, ? first, ? second) = (
		this.first = first
		this.second = second
		this.func = func
		this.n = 0
	)
	
	def init(? func, ? first, ? second, int n) = (
		this.init(func, first, second)
		this.n = n
	)
	
	def head = (
        switch this.n (
        	0 => this.first
        	1 => this.second
        	otherwise => (this.func this.first this.second)
    	)
	)
	
	def tail = (
        switch this.n (
        	0 -> _
        	1 => Iterate2(this.func, this.first, this.second, this.n + 1)
        	otherwise => Iterate2(this.func, this.second, this.func this.first this.second, 2)
    	)
	)
	
	def toString = "iterate2 " + tostr this.first + " " + tostr this.second
)

def iterate2 func first second = Iterate2(func, first, second)

class Iterate3 implements List (

	def init(Func func, ? first, ? second, ? third) = (
		this.first = first
		this.second = second
		this.third = third
		this.func = func
		this.n = 0
	)
	
	def init(? func, ? first, ? second, ? third, int n) = (
		this.init(first, second, third, func)
		this.n = n
	)
	
	def head = (
        switch this.n (
        	0 => first
        	1 => second
        	2 => third
        	otherwise => (func first second third)
    	)
	)
	
	def tail = (
        switch this.n (
        	0 -> _
        	1 -> _
        	2 -> iterate3 this.func this.first this.second this.third (this.n + 1)
        	otherwise => Iterate3(this.func, this.second, this.third, this.head, 3)
    	)
	)
	
	def toString = "iterate3 " + tostr this.first + " " + tostr this.second
)

def iterate3 func first second third = Iterate3(func, first, second, third)


class Cycle implements List (

	def init([] list, [] curr) = (
		this.list = list
		this.curr = curr
	)

	def init([] list) = (
		this.list = list
		this.curr = list
	)
	
	def head = (
		x:_ = this.curr
		return x
	)
	
	def tail = (
    	_:xs = curr
    	if (xs == []) (return (cycle this.list))
    	return (Cycle(list, xs))
	)
	
	def toString = "cycle " + tostr this.list
)

def cycle ([] xs) = Cycle(xs)


def range(start, end,  step) = (
    if (start > end) (return (takewhile (>= end) (iterate (+(-step)) start)))
    return (takewhile (< end) (iterate (+step) start))
)

def range (first, second) (end) = range(first, end, second - first)
 
def range (int start) (int end) = (
    if (start < end) (return (takewhile (< end) (iterate (+1) start)))
    return (takewhile (>= end) (iterate (+(-1)) (start - 1)))
)

class Concatenation implements List (

    def init([] left, [] right) = (
        this.left = left
        this.right = right
    )
    
    def head = (
        x:_ = this.left
        return x
    )
    
    def tail = (
        _:xs = this.left
        if (empty xs) (
            return this.right
        )
        return (Concatenation(xs, this.right))
    )
    
    def toString = (
        string left = tostr this.left
        left = left[0, (-1)]
        string right = tostr this.right
        right = right[1, ...]
        return (left + ", " + right)
    )
)

def concatenation ([] left) ([] right) = Concatenation(left, right)  
def concatenation(string str1)(string str2) = str1 + str2
        
        
        
