def partition n xs = partition' xs [] [] where (
	def partition' [] l r = {l, r}
	def partition' (x:xs) l r = (
		if (x <= n) (return (partition' xs (x:l) r))
		return (partition' xs l (x:r))
	)
)

def quicksort [] = []
def quicksort (x:xs) = left ++ [x] ++ right where (
	{var l, var r} = partition x xs
	var left = quicksort l
	var right = quicksort r
)

def binarysearch (? item) ({} list) = (
    int start
    int end = len list
    int mid
    while (start <= end) (
        mid = toInt ((start + end) / 2)
        if (item == (list[mid])) (
            return mid
        ) else if (item < (list[mid])) (
            end = mid - 1
        ) else (
            start = mid + 1
        )
    )
    return (-1)
)
